import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:student_app/login_screen.dart';
import 'package:student_app/register_screen.dart';
import 'package:student_app/mood_tracker_screen.dart';
import 'package:student_app/home_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';

// This file is generated by the FlutterFire CLI.
// You can generate it by running `flutterfire configure` in your terminal.
import 'firebase_options.dart';
// ...existing imports...

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
    runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Student Mental Health App',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        fontFamily: 'Nunito Sans',
        primaryColor: const Color(0xFF0B52B5),
        scaffoldBackgroundColor: const Color(0xFFF8FAFC),
        cardColor: const Color(0xFFE5E7EB),
        textTheme: const TextTheme(
          displayLarge: TextStyle(color: Color(0xFF1E293B), fontWeight: FontWeight.bold, fontSize: 32),
          titleLarge: TextStyle(color: Color(0xFF0B52B5), fontWeight: FontWeight.w700, fontSize: 24),
          bodyLarge: TextStyle(color: Color(0xFF1E293B), fontSize: 16),
          bodyMedium: TextStyle(color: Color(0xFF64748B), fontSize: 14),
        ),
        colorScheme: const ColorScheme.light(
          primary: Color(0xFF0B52B5),
          secondary: Color(0xFF38B2AC),
          surface: Color(0xFFE5E7EB),
          onPrimary: Color(0xFFFFFFFF),
          onSecondary: Color(0xFF1E293B),
          onSurface: Color(0xFF1E293B),
        ),
        buttonTheme: const ButtonThemeData(
          buttonColor: Color(0xFF0B52B5),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(16))),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ButtonStyle(
            backgroundColor: WidgetStatePropertyAll(Color(0xFF0B52B5)),
            foregroundColor: WidgetStatePropertyAll(Colors.white),
            shape: WidgetStatePropertyAll(
              RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(16))),
            ),
            padding: WidgetStatePropertyAll(EdgeInsets.symmetric(vertical: 16, horizontal: 32)),
            elevation: WidgetStatePropertyAll(2),
          ),
        ),
        inputDecorationTheme: const InputDecorationTheme(
          filled: true,
          fillColor: Color(0xFFE5E7EB),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.all(Radius.circular(12)),
            borderSide: BorderSide(color: Color(0xFF64748B)),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.all(Radius.circular(12)),
            borderSide: BorderSide(color: Color(0xFF0B52B5)),
          ),
        ),
        appBarTheme: const AppBarTheme(
          backgroundColor: Color(0xFFF8FAFC),
          elevation: 0,
          iconTheme: IconThemeData(color: Color(0xFF0B52B5)),
          titleTextStyle: TextStyle(
            color: Color(0xFF1E293B),
            fontWeight: FontWeight.bold,
            fontSize: 20,
            fontFamily: 'Nunito Sans',
          ),
        ),
        navigationBarTheme: NavigationBarThemeData(
          backgroundColor: const Color(0xFFF8FAFC),
          indicatorColor: const Color(0xFF38B2AC),
          labelTextStyle: WidgetStatePropertyAll(TextStyle(
            color: Color(0xFF0B52B5), fontWeight: FontWeight.w600, fontSize: 14)),
        ),
        cardTheme: const CardThemeData(
          color: Color(0xFFE5E7EB),
          elevation: 2,
          margin: EdgeInsets.symmetric(vertical: 12, horizontal: 16),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(16))),
        ),
      ),
      home: const LoginScreen(),
    );
// Example function to request an appointment
  }
}

class AuthWrapper extends StatefulWidget {
  const AuthWrapper({super.key});

  @override
  State<AuthWrapper> createState() => _AuthWrapperState();
}

class _AuthWrapperState extends State<AuthWrapper> {
  late Future<bool> _hasOpenedBefore;

  @override
  void initState() {
    super.initState();
    _hasOpenedBefore = _checkFirstTime();
  }

  Future<bool> _checkFirstTime() async {
    final prefs = await SharedPreferences.getInstance();
    // Check if the flag exists. If not, it's the first time.
    final hasOpened = prefs.getBool('hasOpenedBefore') ?? false;
    if (!hasOpened) {
      // Set the flag to true for subsequent launches.
      await prefs.setBool('hasOpenedBefore', true);
    }
    return hasOpened;
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<bool>(
      future: _hasOpenedBefore,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Scaffold(body: Center(child: CircularProgressIndicator()));
        }

        final hasOpened = snapshot.data ?? false;

        if (!hasOpened) {
          // First time ever opening the app
          return const RegisterScreen();
        } else {
          // Not the first time, check auth state
          return StreamBuilder<User?>(
            stream: FirebaseAuth.instance.authStateChanges(),
            builder: (context, authSnapshot) {
              if (authSnapshot.hasData && authSnapshot.data!.emailVerified) {
                // User is logged in, navigate directly to HomeScreen
                return const HomeScreen();
              }
              // User has opened the app before but is not logged in
              return const LoginScreen();
            },
          );
        }
      },
    );
  }
}

class DecisionScreen extends StatelessWidget {
  final String userId;
  const DecisionScreen({super.key, required this.userId});

  Future<bool> _hasSubmittedMoodToday() async {
    try {
      final now = DateTime.now();
      final startOfToday = DateTime(now.year, now.month, now.day);
      final endOfToday = startOfToday.add(const Duration(days: 1));

      final querySnapshot = await FirebaseFirestore.instance
          .collection('moods')
          .where('user_id', isEqualTo: userId)
          .where('date', isGreaterThanOrEqualTo: Timestamp.fromDate(startOfToday))
          .where('date', isLessThan: Timestamp.fromDate(endOfToday))
          .limit(1)
          .get();

      return querySnapshot.docs.isNotEmpty;
    } catch (e) {
      debugPrint('Error checking mood submission: $e');
      return false;
    }
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<bool>(
      future: _hasSubmittedMoodToday(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Scaffold(
              backgroundColor: Color(0xFFF5F7FA),
              body: Center(child: CircularProgressIndicator()));
        }

        if (snapshot.hasError) {
          // Default to mood tracker on error to allow user to proceed
          return const MoodTrackerScreen();
        }

        final hasSubmitted = snapshot.data ?? false;

        if (hasSubmitted) {
          // Mood for today has been submitted, show the home screen
          return const HomeScreen();
        } else {
          // Mood not submitted, show the mood tracker screen
          return const MoodTrackerScreen();
        }
      },
    );
  }
}
